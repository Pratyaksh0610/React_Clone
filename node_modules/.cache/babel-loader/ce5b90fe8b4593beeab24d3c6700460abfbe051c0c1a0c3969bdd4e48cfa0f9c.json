{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\netflix-clone-main\\\\src\\\\Row.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from './axios';\nimport \"./row.css\";\nimport YouTube from 'react-youtube';\nimport movieTrailer from 'movie-trailer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\nlet opts = {\n  height: \"390px\",\n  width: \"100%\",\n  playerVars: {\n    autoplay: 1\n  }\n};\nfunction Row(_ref) {\n  _s();\n  let {\n    title,\n    fetchUrl,\n    isLargeRow\n  } = _ref;\n  let [movies, SetMovies] = useState([]);\n  let [trailerUrl, setTrailerUrl] = useState(\"\");\n  useEffect(() => {\n    async function fetchData() {\n      let request = await axios.get(fetchUrl);\n      // console.log(request.data.results);\n      SetMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n\n  // console.table(movies);\n\n  const handleClick = movie => {\n    // const url = movie.original_title;\n    // const urlParams = new URLSearchParams(new URL(url).search);\n    if (trailerUrl) {\n      setTrailerUrl();\n    } else {\n      movieTrailer((movie === null || movie === void 0 ? void 0 : movie.name) || (movie === null || movie === void 0 ? void 0 : movie.original_title)).then(url => {\n        console.log(url);\n        const urlParams = new URLSearchParams(new URL(url).search);\n        // console.log(urlParams.get('v'))\n        setTrailerUrl(urlParams.get('v'));\n        // console.log(new URL(url).search); \n      }).catch(error => console.log(error));\n      // console.log(movie);\n    }\n    // console.log(movie);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__posters\",\n      children: movies.map((movie, index) => {\n        return /*#__PURE__*/_jsxDEV(\"img\", {\n          className: `row__poster ${isLargeRow && \"row__posterLarge\"}`,\n          onClick: () => handleClick(movie),\n          src: `${base_url}${movie.poster_path}`,\n          alt: movie.name,\n          id: index\n        }, movie.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 28\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), trailerUrl && /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: trailerUrl,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 28\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n}\n_s(Row, \"lIjX0bcrauOAfmUCwlevE6wT7cU=\");\n_c = Row;\nexport default Row;\nvar _c;\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"names":["React","useState","useEffect","axios","YouTube","movieTrailer","jsxDEV","_jsxDEV","base_url","opts","height","width","playerVars","autoplay","Row","_ref","_s","title","fetchUrl","isLargeRow","movies","SetMovies","trailerUrl","setTrailerUrl","fetchData","request","get","data","results","handleClick","movie","name","original_title","then","url","console","log","urlParams","URLSearchParams","URL","search","catch","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","onClick","src","poster_path","alt","id","videoId","_c","$RefreshReg$"],"sources":["C:/Users/HP/Desktop/netflix-clone-main/src/Row.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from './axios';\nimport \"./row.css\"\nimport YouTube from 'react-youtube';\nimport movieTrailer from 'movie-trailer';\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\"\nlet opts = {\n    height: \"390px\",\n    width: \"100%\",\n    playerVars: {\n        autoplay: 1,\n    },\n};\nfunction Row({ title, fetchUrl, isLargeRow }) {\n    let [movies, SetMovies] = useState([]);\n    let [trailerUrl, setTrailerUrl] = useState(\"\");\n\n    useEffect(() => {\n        async function fetchData() {\n            let request = await axios.get(fetchUrl);\n            // console.log(request.data.results);\n            SetMovies(request.data.results);\n            return request;\n        }\n        fetchData();\n    }, [fetchUrl]);\n\n    // console.table(movies);\n\n    const handleClick = (movie) => {\n        // const url = movie.original_title;\n        // const urlParams = new URLSearchParams(new URL(url).search);\n        if (trailerUrl) {\n            setTrailerUrl();\n        }\n        else {\n            movieTrailer(movie?.name||movie?.original_title)\n                .then((url) => {\n                    console.log(url)\n                    const urlParams = new URLSearchParams(new URL(url).search);\n                    // console.log(urlParams.get('v'))\n                    setTrailerUrl(urlParams.get('v'));\n                    // console.log(new URL(url).search); \n                })\n                .catch((error) => console.log(error))\n            // console.log(movie);\n        }\n        // console.log(movie);\n    }\n\n    return (\n        <div className='row'>\n            {/* title */}\n            <h2>{title}</h2>\n            {/* container->posters */}\n            <div className='row__posters'>\n                {/* several row_posters */}\n                {movies.map((movie, index) => {\n                    return <img\n                        className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n                        onClick={() => handleClick(movie)}\n                        src={`${base_url}${movie.poster_path}`} alt={movie.name} key={movie.id} id={index} />\n                })}\n            </div>\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n        </div>\n    )\n}\n\nexport default Row;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}